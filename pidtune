import numpy as np
from scipy.optimize import curve_fit

time = [4833, 4933, 5034, 5137, 5238, 5333, 5434, 5533, 5633, 5733, 5834, 5932, 6034, 6133, 6234, 6333, 6434, 6534, 6634, 6733, 6834, 6933, 7036, 7134, 7234, 7333, 7432, 7532, 7633, 7733, 7834, 7933, 8037, 8135, 8233, 8334, 8436, 8536, 8637, 8736, 8835, 8946, 9037, 9135, 9257, 9337, 9438, 9538, 9641, 9744, 9838, 9938, 10039, 10139, 10238, 10338, 10438, 10564, 10642, 10743, 10838, 10939, 11040, 11139, 11249, 11342.41394, 11442.58453, 11542.75511, 11642.9257, 11743.09628, 11843.26687, 11943.43746, 12043.60804, 12143.77863, 12243.94921, 12344.1198, 12444.29038, 12544.46097, 12644.63156, 12744.80214, 12844.97273, 12945.14331, 13045.3139, 13145.48448, 13245.65507, 13345.82566, 13445.99624, 13546.16683, 13646.33741, 13746.508, 13846.67858, 13946.84917, 14047.01976, 14147.19034, 14247.36093, 14347.53151, 14447.7021, 14547.87268, 14648.04327, 14748.21385, 14848.38444, 14948.55503, 15048.72561, 15148.8962, 15249.06678, 15349.23737, 15449.40795, 15549.57854, 15649.74913, 15749.91971, 15850.0903, 15950.26088, 16050.43147, 16150.60205, 16250.77264, 16350.94323, 16451.11381, 16551.2844, 16651.45498, 16751.62557, 16851.79615, 16951.96674, 17052.13733, 17152.30791, 17252.4785, 17352.64908, 17452.81967, 17552.99025, 17653.16084, 17753.33142, 17853.50201, 17953.6726, 18053.84318, 18154.01377, 18254.18435, 18354.35494, 18454.52552, 18554.69611, 18654.8667, 18755.03728, 18855.20787, 18955.37845, 19055.54904, 19155.71962, 19255.89021, 19356.0608, 19456.23138, 19556.40197, 19656.57255, 19756.74314, 19856.91372, 19957.08431, 20057.2549, 20157.42548, 20257.59607, 20357.76665, 20457.93724, 20558.10782, 20658.27841, 20758.44899, 20858.61958, 20958.79017, 21058.96075, 21159.13134, 21259.30192, 21359.47251, 21459.64309, 21559.81368, 21659.98427, 21760.15485, 21860.32544, 21960.49602, 22060.66661, 22160.83719, 22261.00778, 22361.17837]
present_output = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]

# Define the control algorithm function
def control_algorithm(t, Kp, Ki, Kd, Kv, Ks):
    error = 0.7 - present_output[t]  # Calculate the error
    integral = np.trapz(present_output[:t+1], time[:t+1])  # Calculate the integral of the present output
    derivative = (present_output[t] - present_output[t-1]) / (time[t] - time[t-1])  # Calculate the derivative of the present output

    control_output = Kp * error + Ki * integral + Kd * derivative + Kv * 0.7 + Ks  # Calculate the control output
    return control_output

# Use curve_fit to find the optimal values for Kp, Ki, Kd, Kv, and Ks
popt, pcov = curve_fit(control_algorithm, range(len(present_output)), present_output, p0=[1, 1, 1, 1, 1])

Kp_optimal, Ki_optimal, Kd_optimal, Kv_optimal, Ks_optimal = popt  # Extract the optimal values

print("Optimal Kp:", Kp_optimal)
print("Optimal Ki:", Ki_optimal)
print("Optimal Kd:", Kd_optimal)
print("Optimal Kv:", Kv_optimal)
print("Optimal Ks:", Ks_optimal)